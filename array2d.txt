
class Array2D (object):
    class __Column(object):
        """represents a column of the 2d array and is used for 2d indexing"""
        def __init__(self, obj, x):
            self.obj = obj
            self.x = x
        
        def get_range(self, start, stop, step):
            height = self.obj.height
            start = start or 0
            if start < 0: start += height
            stop = stop or height
            if stop < 0: stop += height
            step = step or 1
            return range(start,stop,step)
                
                
        
        def __getitem__(self, y):
            if isinstance(y, slice):
                return [self.obj.get_item(self.x, i) for i in range(y.start or 0, y.stop or self.obj.height, y.step or 1)
                                                       if i >= 0 and i < self.obj.height]
            return self.obj.get_item(self.x, y)
            
        def __setitem__(self, y, value):
            if isinstance(y, slice):
                indices = range(y.start or 0, y.stop or self.height, y.step or 1)
                if len(indices) != len(value):
                    raise ValueError("attempt to assign sequence of size %d to extended slice of size %d"%(len(value),len(indices)))
                for i, row in enumerate(indices):
                    self.obj.set_item(self.x, row, value[i])
            self.obj.set_item(self.x, y, value)
    
    class __ColumnSlice(object):
        """represents a column of the 2d array and is used for 2d indexing"""
        def __init__(self, obj, start, stop, step):
            self.obj = obj
            self.range = range(start or 0, stop or self.)
        
        def __getitem__(self, y):
            if isinstance(y, slice):
                raise NotImplementedError("multi-slicing of 2D arrays is not implemented")
            return [self.obj.get_item(x,y) for x in range(self.start,self.stop,self.step)
                                             if x >= 0 and x < self.obj.height]
        
        def __setitem__(self, y, value):
            if isinstance(y, slice):
                raise NotImplementedError("multi-slicing of 2D arrays is not implemented")
            if len(self.range) != len(value):
                raise ValueError("attempt to assign sequence of size %d to extended slice of size %d"%(len(value),len(self.range)))
                for i, col in enumerate(self.range):
                    self.obj.set_item(col, y, value[i])
        
        def __len__(self):  return len(self.range)
        
    def __init__(self, typecode, width, height, init_val):
        self._array = array.array(typecode, [init_val for i in range(width*height)])
        self._w = width
        self._h = height
    
    def __getattr__(self, name):
        return getattr(self._array, name)
    
    def __getitem__(self, x):
        if isinstance(x, slice):
            return Array2D.__ColumnSlice(self,x.start,x.stop,x.step)
        return Array2D.__Column(self,x)
        
    def __setitem__(self, x, value):
        raise NotImplementedError("setting an entire column is not implemented")
    
    def __delitem__(self, x):
        raise NotImplementedError("deleting items is not implemented")
                             
    def get_item(self,col,row):
        """gets an item from the 2D array at the specified column and row"""
        
        return self._array[row*self.width + col]
        
    def set_item(self,col,row,value):
        self._array[row*self.width + col] = value
    
    @property
    def width(self): return self._w
    
    @property
    def height(self): return self._h
        
        
#def rectangle(obj):
#    return Rectangle(obj.x, obj.y, obj.width, obj.height)

if __name__ == "__main__":
    a = Array2D("h", 4, 3, 0)